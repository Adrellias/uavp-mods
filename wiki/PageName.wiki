#summary UAVX is able to send telemetry in several formats. This is a brief summary.
#labels Featured,UAVX,Telemetry,UAVPSet,gke,jesolins,UAVP

= UAVX Telemetry =

The telemetry formats supported are:

  * none
  * GPS
  * UAVX
  * Ardupilot

The desired format is selected in the telemetry pulldown in UAVPSet.

= GPS =

This format simply echoes the characters as they are received from the GPS.

= UAVX =

This format is specific to the UAVX groundstation programs including UAVXGS.

Telemetry is sent in binary packets formatted as follows:

  * preamble & sync: for telemetry links with a dc chopper one or more 0x55h characters followed by a 0xffh character to synchronise the receiver.
  * ASCII SOH
  * Length: length of the packet in bytes.
  * Type: UAVXFlightPacketTag or UAVXNavPacketTag.
  * Data: ~50 bytes.
  * Checksum: a simple parity checksum over the packet fields including Length, Type and data.
  * ASCII EOT 

== UAVXFlightPacket ==

This packet type contains the main airframe control and attitude parameters.  The () indicates the size of the field in bytes. Most integers are signed with the exception of those relating to state.
 
  * Flags (6): status flags with one bit per flag (see below).		
  * State (1): 	
  * BatteryVoltsADC (2):
  * BatteryCurrentADC (2):
  * BatteryCharge (2):
  * RCGlitches (2):			
  * DesiredThrottle (2):
  * DesiredRoll (2):
  * DesiredPitch (2):
  * DesiredYaw (2):
  * RollRate (2):
  * PitchRate (2):
  * YawRate (2):
  * RollSum (2):
  * PitchSum (2):
  * YawSum (2):
  * LRAcc (2):
  * FBAcc (2):
  * DUAcc (2):
  * LRComp (1):
  * FBComp (1):
  * DUComp (1):
  * AltComp (1):

=== Flags ===

typedef union {
	uint8 AllFlags[FLAG_BYTES];
	struct { // Order of these flags subject to change
		uint8
		NavAltitudeHold:1,	// stick programmed
		TurnToWP:1,			// stick programmed
		MotorsArmed:1,
		LostModel:1,
		NearLevel:1,
		LowBatt:1,
		GPSValid:1,
		NavValid:1,

		BaroFailure:1,
		AccFailure:1,
		CompassFailure:1,
		GPSFailure:1,
		AttitudeHold:1,
		ThrottleMoving:1,
		HoldingAlt:1,
		Navigate:1,

		ReturnHome:1,
		WayPointAchieved:1,
		WayPointCentred:1,
		UsingGPSAlt:1,
		UsingRTHAutoDescend:1,
		BaroAltitudeValid:1,
		RangefinderAltitudeValid:1,
		UsingRangefinderAlt:1,

		// internal flags not really useful externally
		Signal:1,
		RCFrameOK:1, 
		ParametersValid:1,
		RCNewValues:1,
		NewCommands:1,
		AccelerationsValid:1,
		CompassValid:1,
		CompassMissRead:1,

		GyrosErected:1,
		ReceivingGPS:1,
		GPSSentenceReceived:1,
		NavComputed:1,
		CheckThrottleMoved:1,		
		UsingSerialPPM:1,
		UsingTxMode2:1,
		UsingXMode:1,

		UsingTelemetry:1,
		TxToBuffer:1,
		NewBaroValue:1,
		BeeperInUse:1, 
		AcquireNewPosition:1, 
		GPSTestActive:1,
		unused1:1,
		unused2:1;
		};
} Flags;

=== State ===

enum FlightStates { Starting, Landing, Landed, InFlight};
	
== UAVXNavPacket ==

The packet length is 49 bytes.
	
  * NavState (1):
  * FailState (1):
  * GPSNoOfSats (1):
  * GPSFix (1): 
  * CurrWP (1):	The number of the current waypoint. Zero is the launch point.
  * BaroROC(2): rate of climb using barometer in cm/S.
  * RelBaroAltitude (3): altitude using barometer in cm.
  * RangefinderROC (2); // cm/S 
  * RangefinderAltitude (2): rate of climb using rangefinder in cm/S.
  * GPSHDilute (2): GPS horizontal dilution in cm.
  * Heading (2): Compass heading in milliradian.
  * WayHeading (2): direction to next way point in milliradian. 
  * GPSVel (2): ground velocity in cm/S.
  * GPSROC (2): rate of climb using GPS in cm/S.
  * GPSRelAltitude (3): height above the launch point in cm.
  * GPSLatitude (4): latitude of aircraft in deg * 6000000;
  * GPSLongitude (4: longitude of aircraft in deg * 6000000; 
  * DesiredAltitude (3): desired altitude above the launch point in cm.
  * DesiredLatitude (4): latitude of the next way point in deg * 6000000. 
  * DesiredLongitude (4): latitude of the next way point in deg * 6000000.
  * NavStateTimeout (3): remaining loitering time or hold time before auto-land in mS.

=== NavState ===

enum NavStates { HoldingStation, ReturningHome, AtHome, Descending, Touchdown, Navigating, Loitering,
	Terminating };

=== FailState ===

enum FailStates { MonitoringRx, Aborting, Returning, Terminated };